{"version":3,"sources":["webpack:///./src/app/components/admin/jobs/add-job/add-job.component.html","webpack:///./src/app/components/admin/jobs/add-job/add-job.component.scss","webpack:///./src/app/components/admin/jobs/add-job/add-job.component.ts","webpack:///./src/app/components/admin/jobs/job-details/job-details.component.html","webpack:///./src/app/components/admin/jobs/job-details/job-details.component.scss","webpack:///./src/app/components/admin/jobs/job-details/job-details.component.ts","webpack:///./src/app/components/admin/jobs/job.service.ts","webpack:///./src/app/components/admin/jobs/job/job.component.html","webpack:///./src/app/components/admin/jobs/job/job.component.scss","webpack:///./src/app/components/admin/jobs/job/job.component.ts","webpack:///./src/app/components/admin/jobs/jobs-routing.module.ts","webpack:///./src/app/components/admin/jobs/jobs.module.ts","webpack:///./src/app/components/admin/jobs/mock.jobs.ts","webpack:///./src/app/components/admin/jobs/view-jobs/view-jobs-datasource.ts","webpack:///./src/app/components/admin/jobs/view-jobs/view-jobs.component.html","webpack:///./src/app/components/admin/jobs/view-jobs/view-jobs.component.scss","webpack:///./src/app/components/admin/jobs/view-jobs/view-jobs.component.ts"],"names":[],"mappings":"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","file":"components-admin-jobs-jobs-module.js","sourcesContent":["module.exports = \"<form #form=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <mat-card class=\\\"job-card\\\">\\n    <mat-card-title>\\n      Add\\n    </mat-card-title>\\n    <mat-card-content>\\n\\n      <mat-form-field>\\n        <input disabled matInput placeholder=\\\"Select when job was created...\\\"  name=\\\"created\\\" [(ngModel)]=\\\"job.created\\\" [matDatepicker]=\\\"created\\\">\\n        <mat-datepicker-toggle matSuffix [for]=\\\"created\\\"></mat-datepicker-toggle>\\n        <mat-datepicker disabled=\\\"false\\\" #created></mat-datepicker>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <textarea placeholder=\\\"Enter client first name...\\\" rows=\\\"3\\\" maxlength=\\\"300\\\" matInput [(ngModel)]=\\\"job.clientName\\\" name=\\\"firstName\\\"></textarea>\\n      </mat-form-field>\\n\\n      <mat-form-field>\\n        <textarea placeholder=\\\"Enter client address...\\\" (ngModelChange)=\\\"onChange($event)\\\" rows=\\\"3\\\" maxlength=\\\"300\\\" matInput [(ngModel)]=\\\"job.address\\\" name=\\\"address\\\"></textarea>\\n      </mat-form-field>\\n\\n      <!-- <mat-form-field>\\n          <textarea placeholder=\\\"Enter job status...\\\" rows=\\\"3\\\" maxlength=\\\"300\\\" matInput [(ngModel)]=\\\"job.status\\\" name=\\\"status\\\"></textarea>\\n      </mat-form-field> -->\\n\\n      <mat-form-field>\\n          <textarea placeholder=\\\"Enter job id...\\\" rows=\\\"3\\\" maxlength=\\\"300\\\" matInput [(ngModel)]=\\\"job.id\\\" name=\\\"id\\\"></textarea>\\n      </mat-form-field>\\n\\n    </mat-card-content>\\n    <mat-card-actions>\\n      <button mat-button [routerLink]=\\\"['/admin-jobs']\\\" routerDirection=\\\"backward\\\" color=\\\"warn\\\" type=\\\"cancel\\\">Cancel</button>\\n      <button mat-button [routerLink]=\\\"['/admin-jobs']\\\" position=\\\"end\\\" [disabled]=\\\"!form.form.valid\\\" type=\\\"submit\\\">Submit</button>\\n    </mat-card-actions>\\n  </mat-card>\\n </form>\\n\"","module.exports = \".job-card {\\n  min-width: 150px;\\n  max-width: 400px;\\n  width: 100%;\\n  margin: auto; }\\n\\n.mat-form-field {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYW1pYWJyYWhpbS9Eb2N1bWVudHMvR2l0SHViL1BheXJvbGxQcm9qZWN0L3NyYy9hcHAvY29tcG9uZW50cy9hZG1pbi9qb2JzL2FkZC1qb2IvYWRkLWpvYi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLFlBQVksRUFBQTs7QUFHZDtFQUNFLFdBQVcsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4vam9icy9hZGQtam9iL2FkZC1qb2IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuam9iLWNhcmQge1xuICBtaW4td2lkdGg6IDE1MHB4O1xuICBtYXgtd2lkdGg6IDQwMHB4O1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luOiBhdXRvO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cbiJdfQ== */\"","import { AngularFireDatabase } from '@angular/fire/database';\nimport { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-add-job',\n  templateUrl: './add-job.component.html',\n  styleUrls: ['./add-job.component.scss']\n})\nexport class AddJobComponent implements OnInit {\n\n  job: any = [];\n  formIsFilledOut = false;\n\n  constructor(private db: AngularFireDatabase) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    console.log(this.job);\n    this.job.created = new Date(this.job.created).valueOf();\n    this.db.list('jobs').push(this.job)\n    .then(_ => {\n      this.job = {};\n      console.log('success');\n    });\n\n  }\n\n  cancel() {\n    this.job = {};\n  }\n\n  onChange(e) {\n    this.job.id = this.generateJobId(e);\n  }\n\n  generateJobId(address) {\n    const regex = /\\d+ [a-zA-Z]{3}/g;\n\n    const match = address.match(regex);\n\n    return match && match[0] ? match[0].replace(/\\s+/g, '').toUpperCase() : '';\n  }\n\n}\n","module.exports = \"<mat-card>\\n  <button mat-stroked-button [routerLink]= \\\"['/admin-jobs']\\\" routerDirection=\\\"backward\\\">\\n    back\\n  </button>\\n<mat-card-header>\\n  JOB ID: {{id}}\\n</mat-card-header>\\n<!-- <mat-card-content>\\n  <mat-card-title>\\n    {{theJob.clientName.firstName}} {{theJob.clientName.lastName}}\\n  </mat-card-title>\\n  <mat-card-subtitle [ngStyle]=\\\"{'color': theJob.status === 'not started' ? 'red': theJob.status === 'in progress' ? 'yellow': theJob.status === 'done' ? 'green': ''}\\\">\\n    status\\n  </mat-card-subtitle>\\n  {{theJob.created | date: 'MM/dd/yyyy'}}\\n  <br>\\n  {{theJob.jobAddress.street}}\\n  <br>\\n  {{theJob.jobAddress.city}}, {{theJob.jobAddress.zipCode}}\\n\\n</mat-card-content> -->\\n\\n\\n\\n\\n\\n\\n\\n</mat-card>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4vam9icy9qb2ItZGV0YWlscy9qb2ItZGV0YWlscy5jb21wb25lbnQuc2NzcyJ9 */\"","import { JobService } from '../job.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { Job } from '../job';\n\n@Component({\n  selector: 'app-job-details',\n  templateUrl: './job-details.component.html',\n  styleUrls: ['./job-details.component.scss']\n})\nexport class JobDetailsComponent implements OnInit {\n  theJob: Job;\n  id = 0;\n\n  constructor(\n    private route: ActivatedRoute,\n    private service: JobService\n  ) { }\n\n\n  ngOnInit() {\n    this.route.params\n    .subscribe(params => {\n      console.log( params );\n      this.id = params.id;\n      this.theJob = this.service.getJobById(this.id);\n    });\n  }\n\n}\n","import { Job } from './job';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { JOBS } from './mock.jobs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobService {\n\n  constructor() { }\n\n  getJobs(): Observable<Job[]> {\n    return of(JOBS);\n  }\n\n  getJobById(id: number): Job {\n    const job = JOBS.find( x => x.id === +id );\n    return job;\n  }\n}\n","module.exports = \"<router-outlet></router-outlet>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4vam9icy9qb2Ivam9iLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-job',\n  templateUrl: './job.component.html',\n  styleUrls: ['./job.component.scss']\n})\nexport class JobComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { AddJobComponent } from './add-job/add-job.component';\nimport { AdminGuard } from '../../auth/guards/admin.guard';\nimport { JobComponent } from './job/job.component';\nimport { JobDetailsComponent } from './job-details/job-details.component';\nimport { ViewJobsComponent } from './view-jobs/view-jobs.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst jobsRoutes: Routes = [\n{\n  ///   \"/admin-jobs\"\n  path: '',\n  component: JobComponent,\n  canActivate: [AdminGuard],\n  children: [\n    //    \"/admin-jobs/:id\" or \"/admin-jobs/addJob\" or just \"/admin-jobs\"\n    {\n    path: '',\n    canActivateChild: [AdminGuard],\n    children: [\n      { path: '', component: ViewJobsComponent},\n      { path: 'addJob', component: AddJobComponent },\n      { path: ':id', component: JobDetailsComponent }\n    ]\n    }\n  ]\n  }\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(jobsRoutes)],\n  exports: [RouterModule]\n})\nexport class JobsRoutingModule { }\n","import { FormsModule } from '@angular/forms';\nimport { AddJobComponent } from './add-job/add-job.component';\nimport { AppMaterialModule } from '../../../shared/app-material.module';\nimport { ViewJobsComponent } from './view-jobs/view-jobs.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JobsRoutingModule } from './jobs-routing.module';\nimport { JobComponent } from './job/job.component';\nimport { JobDetailsComponent } from './job-details/job-details.component';\n\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    JobsRoutingModule,\n    AppMaterialModule,\n    FormsModule\n  ],\n  declarations: [JobComponent, ViewJobsComponent, AddJobComponent, JobDetailsComponent],\n  exports: [JobComponent, ViewJobsComponent, AddJobComponent, JobDetailsComponent]\n})\nexport class JobsModule { }\n","import { Job } from './job';\n\nexport const JOBS: Job[] = [\n{ id: 1,\n  clientName: {\n    firstName: 'Rick',\n    lastName: 'Sanchez'\n  },\n  jobAddress: {\n    street: '1245 Rick & Morty Rd',\n    city: 'Schezwan',\n    zipCode: 23411\n  },\n  status: 'not started',\n  created: new Date(2019, 10, 4)\n},\n{ id: 2,\n  clientName: {\n    firstName: 'Sponge',\n    lastName: 'Bob'\n  },\n  jobAddress: {\n    street: '1223 Bikini Bottom Rd.',\n    city: 'Bikini Bottom',\n    zipCode: 82838\n  },\n  status: 'in progress',\n  created: new Date(2019, 4, 23)\n},\n{ id: 3,\n  clientName: {\n    firstName: 'Yeet',\n    lastName: 'Yeeters'\n  },\n  jobAddress: {\n    street: '445 Yeeters Rd.',\n    city: 'YeetNation',\n    zipCode: 40204\n  },\n  status: 'done',\n  created: new Date(2019, 10, 4)\n}\n]\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface ViewjobsItem {\n  id: number;\n  clientName: {\n    firstName: string,\n    lastName: string\n  };\n  jobAddress: {\n    street: string,\n    city: string,\n    zipCode: number\n  };\n  status: string;\n  created: Date;\n}\n\n// TODO: replace this with real data from your application\n\n\n/**\n * Data source for the Viewjobs view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class ViewjobsDataSource extends DataSource<ViewjobsItem> {\n  data: ViewjobsItem[] = [];\n\n  constructor(private paginator: MatPaginator, private sort: MatSort) {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<ViewjobsItem[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    // Set the paginator's length\n    this.paginator.length = this.data.length;\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: ViewjobsItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: ViewjobsItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'created': return compare(+a.id, +b.id, isAsc);\n        case 'clientName': return compare(a.created, b.created, isAsc);\n        case 'address': return compare(a.created, b.created, isAsc);\n        case 'status': return compare(a.created, b.created, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","module.exports = \"<mat-card class=\\\"mat-elevation-z8\\\">\\n  <mat-card-title> JOBS\\n    <button mat-raised-button class=\\\"add-job-button\\\" [routerLink]=\\\"['/admin-jobs/addJob']\\\"> Add Job </button>\\n  </mat-card-title>\\n  <table mat-table #table [dataSource]='dataSource' matSort aria-label=\\\"Elements\\\">\\n\\n     <!-- Status Column -->\\n     <ng-container matColumnDef=\\\"jobId\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Job ID</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\n      </ng-container>\\n    <!-- Date Column -->\\n    <ng-container matColumnDef = 'created'>\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Date </th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"> {{row.created | date: 'MM/dd/yyyy'}} </td>\\n    </ng-container>\\n    <!-- Client Name Column -->\\n    <ng-container matColumnDef=\\\"clientName\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Client Name</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.clientName}}</td>\\n    </ng-container>\\n    <!-- Address Column -->\\n    <ng-container matColumnDef=\\\"address\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Address</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.address}}</td>\\n      </ng-container>\\n\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" [routerLink]=\\\"['/admin-jobs', row.id]\\\"></tr>\\n  </table>\\n\\n    <mat-paginator #paginator\\n      [pageIndex]=\\\"0\\\"\\n      [pageSize]=\\\"50\\\"\\n      [pageSizeOptions]=\\\"[25, 50, 100, 250]\\\">\\n  </mat-paginator>\\n\\n</mat-card>\\n\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.add-job-button {\\n  position: absolute;\\n  margin: 0;\\n  right: 10px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYW1pYWJyYWhpbS9Eb2N1bWVudHMvR2l0SHViL1BheXJvbGxQcm9qZWN0L3NyYy9hcHAvY29tcG9uZW50cy9hZG1pbi9qb2JzL3ZpZXctam9icy92aWV3LWpvYnMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXLEVBQUE7O0FBR2I7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULFdBQVcsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRtaW4vam9icy92aWV3LWpvYnMvdmlldy1qb2JzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGV7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uYWRkLWpvYi1idXR0b24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG1hcmdpbjogMDtcbiAgcmlnaHQ6IDEwcHg7XG59XG4iXX0= */\"","import { JobService } from '../job.service';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { ViewjobsDataSource, ViewjobsItem } from './view-jobs-datasource';\nimport { Subscription, Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { Job } from '../job';\nimport { switchMap } from 'rxjs/operators';\n\n\n\n\n@Component({\n  selector: 'app-view-jobs',\n  templateUrl: './view-jobs.component.html',\n  styleUrls: ['./view-jobs.component.scss']\n})\nexport class ViewJobsComponent implements OnInit, OnDestroy {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  dataSource: ViewjobsDataSource;\n\n// private jobs$: Observable<Job[]>;\n displayedColumns = ['created', 'clientName', 'address'];\n subscription: Subscription;\n\nconstructor(\n  // private service: JobService,\n  // private route: ActivatedRoute,\n  private db: AngularFireDatabase\n) {}\n\n// ngOnInit() {\n//   this.jobs$ = this.route.paramMap.pipe(\n//     switchMap(() => {\n//       return this.service.getJobs();\n//     })\n//   )\n// }\n\n\n\n  //  Columns displayed in the table. Columns IDs can be added, removed, or reordered.\n  // displayedColumns = ['date', 'text'];\n// private job(jobID) {\n//   const job = this.db.doc(`jobs/${jobID.jobID}`);\n//   const viewJob: Jobs = {\n//     jobid: jobID,\n//     name:\n  // }\n// }\n\n  ngOnInit() {\n    this.subscription = this.db.list<ViewjobsItem>('jobs').valueChanges().subscribe(d => {\n      this.dataSource = new ViewjobsDataSource(this.paginator, this.sort);\n      this.dataSource.data = d;\n    });\n  }\n\n  ngOnDestroy(): void {\n   this.subscription.unsubscribe();\n  }\n}\n"],"sourceRoot":""}